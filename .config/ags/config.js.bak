import App from "resource:///com/github/Aylur/ags/app.js";
import Widget from "resource:///com/github/Aylur/ags/widget.js";
import Hyprland from "resource:///com/github/Aylur/ags/service/hyprland.js";
import Notifications from "resource:///com/github/Aylur/ags/service/notifications.js";
import Mpris from "resource:///com/github/Aylur/ags/service/mpris.js";
import Audio from "resource:///com/github/Aylur/ags/service/audio.js";
import Battery from "resource:///com/github/Aylur/ags/service/battery.js";
import SystemTray from "resource:///com/github/Aylur/ags/service/systemtray.js";
import { execAsync } from "resource:///com/github/Aylur/ags/utils.js";
import { monitorFile } from "resource:///com/github/Aylur/ags/utils.js";

// Components

// Helper function to create a button
const createButton = (options) => {
  return Widget.Button(options);
};

// Helper function to create a label
const createLabel = (options) => {
  return Widget.Label(options);
};

// Helper function to create an icon
const createIcon = (options) => {
  return Widget.Icon(options);
};

// Workspaces Component
const Workspaces = () => {
  const createWorkspaceButton = (id) => {
    return createButton({
      on_clicked: () => Hyprland.sendMessage(`dispatch workspace ${id}`),
      child: createLabel(`${id}`),
      class_name: Hyprland.active.workspace
        .bind("id")
        .transform((i) => (i === id ? "focused" : "")),
    });
  };

  const workspacesData = Hyprland.bind("workspaces").transform((ws) => {
    // Ensure ws is an array, and if not, convert it to an empty array
    const workspacesArray = Array.isArray(ws) ? ws : [];
    // Sort the workspaces by their IDs in ascending order
    const sortedWorkspaces = workspacesArray.sort((a, b) => a.id - b.id);
    return sortedWorkspaces.map(({ id }) => createWorkspaceButton(id));
  });

  return Widget.Box({
    class_name: "workspaces",
    children: workspacesData,
  });
};

// ClientTitle Component
const ClientTitle = () => {
  return createButton({
    class_name: "client-title",
    label: Hyprland.active.client.bind("title"),
  });
};

// Clock Component
const Clock = () => {
  return createButton({
    class_name: "clock",
    setup: (self) => self.poll(1000, (self) => updateClockLabel(self)),
  });
};

const updateClockLabel = async (self) => {
  const date = await execAsync(["date", "+%H:%M:%S %b %e."]);
  self.label = date;
};

// CPUTemperature Component
const CPUTemperature = () => {
  return createButton({
    class_name: "cpu-temperature-label",
    label: "CPU: -",
    setup: (self) => {
      const updateInterval = 1000;

      const updateTemperature = async () => {
        const sensorOutput = await execAsync(["sensors"]);
        const temperature =
          sensorOutput.match(/Tctl:\s+\+(\d+\.\d+)/)?.[1] + "Â°C" || "N/A";
        self.label = `CPU: ${temperature}`;
      };

      self.poll(updateInterval, updateTemperature);
      updateTemperature();
    },
  });
};

// Notification Component
const Notification = () => {
  return Widget.Box({
    class_name: "notification",
    visible: Notifications.bind("popups").transform((p) => p.length > 0),
    children: [
      createIcon({
        icon: "preferences-system-notifications-symbolic",
      }),
      NotificationLabel(),
    ],
  });
};

const NotificationLabel = () => {
  return createLabel({
    label: Notifications.bind("popups").transform((p) => p[0]?.summary || ""),
  });
};

// Media Component
const Media = () => {
  return createButton({
    class_name: "media",
    on_primary_click: () => Mpris.getPlayer("")?.playPause(),
    on_scroll_up: () => Mpris.getPlayer("")?.next(),
    on_scroll_down: () => Mpris.getPlayer("")?.previous(),
    child: MediaLabel(),
  });
};

const MediaLabel = () => {
  return createLabel("-").hook(
    Mpris,
    (self) => {
      if (Mpris.players[0]) {
        const { track_artists, track_title } = Mpris.players[0];
        self.label = `${track_artists.join(", ")} - ${track_title}`;
      } else {
        self.label = "Nothing is playing";
      }
    },
    "player-changed"
  );
};

// Volume Component
const Volume = () => {
  return createButton({
    class_name: "volume-button",
    on_clicked: () => {},
    child: VolumeBox(),
  });
};

const VolumeBox = () => {
  return Widget.Box({
    class_name: "volume",
    children: [VolumeIcon(), VolumeLabel()],
  });
};

const VolumeIcon = () => {
  return createIcon().hook(
    Audio,
    (self) => {
      if (!Audio.speaker) return;

      const category = {
        101: "overamplified",
        67: "high",
        34: "medium",
        1: "low",
        0: "muted",
      };

      const icon = Audio.speaker.is_muted
        ? 0
        : [101, 67, 34, 1, 0].find(
            (threshold) => threshold <= Audio.speaker.volume * 100
          );

      self.icon = `audio-volume-${category[icon]}-symbolic`;
    },
    "speaker-changed"
  );
};

const VolumeLabel = () => {
  return createLabel({
    class_name: "volume-label",
    setup: (self) =>
      self.hook(
        Audio,
        () => {
          self.label = ` Vol: ${Math.round(Audio.speaker?.volume * 100) || 0}%`;
        },
        "speaker-changed"
      ),
  });
};

// BatteryLabel Component
const BatteryLabel = () => {
  return createButton({
    class_name: "battery-label-button",
    on_clicked: () => {},
    child: BatteryBox(),
  });
};

const BatteryBox = () => {
  return Widget.Box({
    class_name: "battery",
    visible: Battery.bind("available"),
    children: [BatteryIcon(), BatteryProgressBar()],
  });
};

const BatteryIcon = () => {
  return createIcon({
    icon: Battery.bind("percent").transform((p) => {
      return `battery-level-${Math.floor(p / 10) * 10}-symbolic`;
    }),
  });
};

const BatteryProgressBar = () => {
  return Widget.ProgressBar({
    vpack: "center",
    fraction: Battery.bind("percent").transform((p) => {
      return p > 0 ? p / 100 : 0;
    }),
  });
};

// SysTray Component
const SysTray = () => {
  return Widget.Box({
    children: SystemTray.bind("items").transform((items) =>
      items.map((item) => SysTrayButton(item))
    ),
  });
};

const SysTrayButton = (item) => {
  return createButton({
    child: SysTrayIcon(item),
    on_primary_click: (_, event) => item.activate(event),
    on_secondary_click: (_, event) => item.openMenu(event),
    binds: [["tooltip-markup", item, "tooltip-markup"]],
  });
};

const SysTrayIcon = (item) => {
  return createIcon({
    binds: [["icon", item, "icon"]],
  });
};

// Main Script
monitorFile(`${App.configDir}/style.scss`, function () {
  App.resetCss();
  App.applyCss(`${App.configDir}/style.scss`);
});

const createBar = (position, monitor) => {
  const Center = Widget.Box({
    spacing: 8,
    children: [
      Media(),
      Notification(),
      Volume(),
      BatteryLabel(),
      Workspaces(),
      Clock(),
      CPUTemperature(),
      SysTray(),
      ClientTitle(),
    ],
  });

  return Widget.Window({
    name: `${position}-bar-${monitor}`,
    class_name: "bar",
    monitor,
    anchor: [position],
    exclusivity: "exclusive",
    child: Widget.CenterBox({
      center_widget: Center,
    }),
  });
};

const numberOfMonitors = 1; // Replace with the actual number of monitors

const bars = Array.from({ length: numberOfMonitors }, (_, monitor) => [
  createBar("top", monitor),
  createBar("bottom", monitor),
]).flat();

export default {
  style: App.configDir + "/style.scss",
  windows: bars,
};
